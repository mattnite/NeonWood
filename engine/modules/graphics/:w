//
// I think it's about time Peterino's tackling rendering.
//
// My first REAL crack at making a gpu driven proper vulkan renderer.
//
// This is a replacement for vk_renderer.
//
// Spec List for rendering:
//
// gltf support
// Grouped Texture Binding
// Clustered Forward+ Rendering
//
// Skeletal Animation
// PBR
//
// Papyrus 2d Rendering
// Papyrus 3d Rendering
// Materials system (rendering for gameobjects)
//
// Modular rendergraph workflow (not shadergraph)
//
// Run-To-Completion job based architecture.
//
// Lock free RHI dispatch thread (triple command buffering)
//  - next to write (NTW)
//  - most recently written (MRW)
//  - currently rendering (CR)
//
//  when frame is done processing
//      -> Swap NTW with MRW
//          -> queue RENDER job
//              - Render job swaps MRW with NTW
//              - Submit subjobs which build command buffers
//              - Signals Next Render Available
//          -> game simulations UPLOAD render info
//              -> writes into NTW
//
//  renderer subsystems: in vulkan the order that command buffers appear determin the submission order.
//
// Game API side:
//
// Queue Based High Level Render Jobs
//
// Queue Based High Level Asset Jobs
//
//
// Lock free RHI dispatch thread (triple command buffering)
//  - next to write (NTW)
//  - most recently written (MRW)
//  - currently rendering (CR)
//
//  when frame is done processing
//      -> Swap NTW with MRW
//          -> queue RENDER job
//              - Render job swaps MRW with NTW
//              - Submit subjobs which build command buffers
//              - Signals Next Render Available
//          -> game simulations UPLOAD render info
//              -> writes into NTW
//
//  renderer subsystems: in vulkan the order that command buffers appear determin the submission order.
//
